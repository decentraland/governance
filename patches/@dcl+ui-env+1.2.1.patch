diff --git a/node_modules/@dcl/ui-env/dist/env.d.ts b/node_modules/@dcl/ui-env/dist/env.d.ts
index af8de20..acefb76 100644
--- a/node_modules/@dcl/ui-env/dist/env.d.ts
+++ b/node_modules/@dcl/ui-env/dist/env.d.ts
@@ -1,7 +1,8 @@
 export declare enum Env {
+    LOCAL = "local",
     DEVELOPMENT = "dev",
     STAGING = "stg",
-    PRODUCTION = "prod"
+    PRODUCTION = "prod",
 }
 /**
  * Returns an array with all the possible envs
diff --git a/node_modules/@dcl/ui-env/dist/env.js b/node_modules/@dcl/ui-env/dist/env.js
index 6bfbfaa..ac64ee7 100644
--- a/node_modules/@dcl/ui-env/dist/env.js
+++ b/node_modules/@dcl/ui-env/dist/env.js
@@ -1,82 +1,96 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getEnv = exports.getDefaultEnv = exports.parseEnvVar = exports.isEnv = exports.getEnvList = exports.Env = void 0;
-const location_1 = require("./location");
-var Env;
-(function (Env) {
-    Env["DEVELOPMENT"] = "dev";
-    Env["STAGING"] = "stg";
-    Env["PRODUCTION"] = "prod";
-})(Env = exports.Env || (exports.Env = {}));
+'use strict'
+Object.defineProperty(exports, '__esModule', { value: true })
+exports.getEnv =
+  exports.getDefaultEnv =
+  exports.parseEnvVar =
+  exports.isEnv =
+  exports.getEnvList =
+  exports.Env =
+    void 0
+const location_1 = require('./location')
+var Env
+;(function (Env) {
+  Env['LOCAL'] = 'local'
+  Env['DEVELOPMENT'] = 'dev'
+  Env['STAGING'] = 'stg'
+  Env['PRODUCTION'] = 'prod'
+})((Env = exports.Env || (exports.Env = {})))
 /**
  * Returns an array with all the possible envs
  */
 function getEnvList() {
-    return Object.values(Env);
+  return Object.values(Env)
 }
-exports.getEnvList = getEnvList;
+exports.getEnvList = getEnvList
 /**
  * Helper to detect if a string value is an Env
  * @param value
  * @returns boolean
  */
 function isEnv(value) {
-    return getEnvList().includes(value);
+  return getEnvList().includes(value)
 }
-exports.isEnv = isEnv;
+exports.isEnv = isEnv
 /**
  * Helper to convert a string value into an Env type or throw if not valid
  * @param envVar - An environment variable to be parsed
  * @returns - The same envVar value as Env
  */
 function parseEnvVar(envVar) {
-    if (isEnv(envVar)) {
-        return envVar;
-    }
-    else {
-        throw new Error(`Invalid value for DCL_DEFAULT_ENV. Found "${envVar}", possible values are ${getEnvList()
-            .map((env) => `"${env}"`)
-            .join(', ')}.`);
-    }
+  if (isEnv(envVar)) {
+    return envVar
+  } else {
+    throw new Error(
+      `Invalid value for DCL_DEFAULT_ENV. Found "${envVar}", possible values are ${getEnvList()
+        .map((env) => `"${env}"`)
+        .join(', ')}.`
+    )
+  }
 }
-exports.parseEnvVar = parseEnvVar;
+exports.parseEnvVar = parseEnvVar
 /**
  * Return the default Env
  * @param envVars - Process environment vars
  * @returns Env
  */
 function getDefaultEnv(envVars = {}) {
-    const { DCL_DEFAULT_ENV, REACT_APP_DCL_DEFAULT_ENV } = envVars;
-    if (DCL_DEFAULT_ENV &&
-        REACT_APP_DCL_DEFAULT_ENV &&
-        DCL_DEFAULT_ENV !== REACT_APP_DCL_DEFAULT_ENV) {
-        throw new Error('You have defined both DCL_DEFAULT_ENV and REACT_APP_DCL_DEFAULT_ENV with different values');
-    }
-    if (DCL_DEFAULT_ENV) {
-        return parseEnvVar(DCL_DEFAULT_ENV);
-    }
-    if (REACT_APP_DCL_DEFAULT_ENV) {
-        return parseEnvVar(REACT_APP_DCL_DEFAULT_ENV);
-    }
-    return Env.PRODUCTION;
+  const { DCL_DEFAULT_ENV, GATSBY_DCL_DEFAULT_ENV } = envVars
+  if (
+    DCL_DEFAULT_ENV &&
+    GATSBY_DCL_DEFAULT_ENV &&
+    DCL_DEFAULT_ENV !== GATSBY_DCL_DEFAULT_ENV
+  ) {
+    throw new Error(
+      'You have defined both DCL_DEFAULT_ENV and GATSBY_DCL_DEFAULT_ENV with different values'
+    )
+  }
+  if (DCL_DEFAULT_ENV) {
+    return parseEnvVar(DCL_DEFAULT_ENV)
+  }
+  if (GATSBY_DCL_DEFAULT_ENV) {
+    return parseEnvVar(GATSBY_DCL_DEFAULT_ENV)
+  }
+  return Env.PRODUCTION
 }
-exports.getDefaultEnv = getDefaultEnv;
+exports.getDefaultEnv = getDefaultEnv
 /**
  * Returns the Env to be used
  * @returns Env
  */
 function getEnv() {
-    if (typeof window !== 'undefined') {
-        const envFromQueryParam = (0, location_1.getEnvFromQueryParam)(window.location);
-        if (envFromQueryParam) {
-            return envFromQueryParam;
-        }
-        const envFromTLD = (0, location_1.getEnvFromTLD)(window.location);
-        if (envFromTLD) {
-            return envFromTLD;
-        }
+  if (typeof window !== 'undefined') {
+    const envFromQueryParam = (0, location_1.getEnvFromQueryParam)(
+      window.location
+    )
+    if (envFromQueryParam) {
+      return envFromQueryParam
+    }
+    const envFromTLD = (0, location_1.getEnvFromTLD)(window.location)
+    if (envFromTLD) {
+      return envFromTLD
     }
-    return getDefaultEnv(process.env);
+  }
+  return getDefaultEnv(process.env)
 }
-exports.getEnv = getEnv;
+exports.getEnv = getEnv
 //# sourceMappingURL=env.js.map
diff --git a/node_modules/@dcl/ui-env/dist/location.js b/node_modules/@dcl/ui-env/dist/location.js
index da51e2b..c916901 100644
--- a/node_modules/@dcl/ui-env/dist/location.js
+++ b/node_modules/@dcl/ui-env/dist/location.js
@@ -1,41 +1,41 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-exports.getEnvFromQueryParam = exports.getEnvFromTLD = void 0;
-const env_1 = require("./env");
+'use strict'
+Object.defineProperty(exports, '__esModule', { value: true })
+exports.getEnvFromQueryParam = exports.getEnvFromTLD = void 0
+const env_1 = require('./env')
 /**
  * Returns the Env from the top level domain if possible
  * @param location
  * @returns Env or null
  */
 function getEnvFromTLD(location) {
-    const { host } = location;
-    if (host.endsWith('.org')) {
-        return env_1.Env.PRODUCTION;
-    }
-    else if (host.endsWith('.today') || host.endsWith('.net')) {
-        return env_1.Env.STAGING;
-    }
-    else if (host.endsWith('.io') || host.endsWith('.zone')) {
-        return env_1.Env.DEVELOPMENT;
-    }
-    return null;
+  const { host } = location
+  if (host.endsWith('.org')) {
+    return env_1.Env.PRODUCTION
+  } else if (host.endsWith('.today') || host.endsWith('.net')) {
+    return env_1.Env.STAGING
+  } else if (host.endsWith('.io') || host.endsWith('.zone')) {
+    return env_1.Env.DEVELOPMENT
+  } else if (host.endsWith('localhost:8000')) {
+    return env_1.Env.LOCAL
+  }
+  return null
 }
-exports.getEnvFromTLD = getEnvFromTLD;
+exports.getEnvFromTLD = getEnvFromTLD
 /**
  * Returns the Env from the query param if possible
  * @param location
  * @returns Env or null
  */
 function getEnvFromQueryParam(location) {
-    const search = new URLSearchParams(location.search);
-    const param = search.get('ENV') || search.get('env');
-    if (param) {
-        const env = param.toLowerCase();
-        if ((0, env_1.isEnv)(env)) {
-            return env;
-        }
+  const search = new URLSearchParams(location.search)
+  const param = search.get('ENV') || search.get('env')
+  if (param) {
+    const env = param.toLowerCase()
+    if ((0, env_1.isEnv)(env)) {
+      return env
     }
-    return null;
+  }
+  return null
 }
-exports.getEnvFromQueryParam = getEnvFromQueryParam;
+exports.getEnvFromQueryParam = getEnvFromQueryParam
 //# sourceMappingURL=location.js.map
