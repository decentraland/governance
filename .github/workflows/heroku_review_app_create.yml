name: Heroku Review App Create

# SEE: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows
on:
  pull_request:
    types:
      - labeled
      - opened
      - reopened
      - synchronize

# SEE: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  contents: read
  deployments: write
  pull-requests: read

# Update these variables for your project
env:
  GITHUB_DEPLOYMENT_ENVIRONMENT: dcl-governance
  GITHUB_LABEL: review-app
  HEROKU_PIPELINE_NAME: dcl-governance
  HEROKU_REVIEW_APP_ADDONS: --addons=heroku-postgresql:mini

jobs:
  heroku_review_app_check:
    name: Create or Update Heroku Review App
    runs-on: ubuntu-latest
    if: github.event.pull_request.state != 'closed'
    steps:
      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_email: yemel@decentraland.org
          justlogin: true

      - name: Set Heroku Review App name
        run: echo HEROKU_APP_NAME="governance-pr-${{ github.event.number }}" >> $GITHUB_ENV

      - name: Get Heroku Review App info
        id: heroku_apps_info
        continue-on-error: true
        run: heroku apps:info -a ${{ env.HEROKU_APP_NAME }}

      - name: Set exists ENV vars
        run: |
          echo HEROKU_APP_EXISTS="${{ steps.heroku_apps_info.outcome == 'success' }}" >> $GITHUB_ENV
          echo GITHUB_LABEL_EXISTS="${{ contains(github.event.pull_request.labels.*.name, env.GITHUB_LABEL) }}" >> $GITHUB_ENV
      - name: Check out PR code from GitHub
        if: env.GITHUB_LABEL_EXISTS == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      # Wire up the github deployment so links to `view deployment` are valid on the PR
      - name: Create GitHub deployment
        id: deployment
        if: env.GITHUB_LABEL_EXISTS == 'true'
        uses: chrnorm/deployment-action@releases/v1
        with:
          initial_status: in_progress
          token: ${{ github.token }}
          target_url: https://${{ env.HEROKU_APP_NAME}}.herokuapp.com/
          environment: ${{ env.GITHUB_DEPLOYMENT_ENVIRONMENT }}
          ref: ${{ github.head_ref }}

      - name: Create Heroku Review App
        id: heroku_review_app_create
        if: env.GITHUB_LABEL_EXISTS == 'true' && env.HEROKU_APP_EXISTS == 'false'
        run: heroku apps:create -t gov-squad ${{ env.HEROKU_APP_NAME }} ${{ env.HEROKU_REVIEW_APP_ADDONS }}

      - name: Copy environment variables from default to new review app
        run: |
          # Fetch env vars from source app
          SOURCE_VARS=$(heroku config -s -a dcl-governance | grep -v '^HEROKU_')
          # Fetch env vars from destination app
          DEST_VARS=$(heroku config -s -a ${{ env.HEROKU_APP_NAME }})

          # Prepare a string to hold new vars to set
          NEW_VARS=""

          # Iterate over source vars and add them to NEW_VARS if not already in destination vars
          for var in $SOURCE_VARS; do
            KEY=$(echo $var | cut -f1 -d'=')
            if ! echo "$DEST_VARS" | grep -q "^$KEY="; then
              NEW_VARS+="$var "
            fi
          done

          # Set all new vars in one command, if any
          if [ -n "$NEW_VARS" ]; then
            heroku config:set $NEW_VARS -a ${{ env.HEROKU_APP_NAME }}
          fi
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}


      - name: Add Heroku Review App to pipeline
        if: steps.heroku_review_app_create.outcome == 'success'
        run: heroku pipelines:add ${{ env.HEROKU_PIPELINE_NAME }} --app=${{ env.HEROKU_APP_NAME }} --stage=review

      - name: Add Heroku git remote
        id: heroku_git_remote
        if: env.GITHUB_LABEL_EXISTS == 'true'
        run: heroku git:remote --app=${{ env.HEROKU_APP_NAME }}

      - name: Set up Node.js
        if: steps.heroku_review_app_create.outcome == 'success' || env.HEROKU_APP_EXISTS == 'true'
        uses: actions/setup-node@v2
        with:
          node-version: 18.8.0
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Set up Git
        if: steps.heroku_review_app_create.outcome == 'success' || env.HEROKU_APP_EXISTS == 'true'
        run: git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"

      - name: Install dependencies
        id: install-dependencies
        if: steps.heroku_review_app_create.outcome == 'success' || env.HEROKU_APP_EXISTS == 'true'
        run: npm ci

      - name: Build image
        id: docker-build-image
        if: steps.install-dependencies.outcome == 'success'
        run: |
          docker build -t governance:${{ github.sha }} \
                       --build-arg version_number=${{ github.sha }} \
                       --build-arg heroku_app_name=$HEROKU_APP_NAME .

      - name: Log in to Heroku Container Registry
        if: steps.docker-build-image.outcome == 'success'
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:login

      - name: Tag and Push to Heroku
        id: docker-push-to-registry
        if: steps.docker-build-image.outcome == 'success'
        run: |
          docker tag latest registry.heroku.com/dcl-governance/web
          docker push registry.heroku.com/dcl-governance/web

      - name: Enable Heroku Dyno Metadata
        if: steps.heroku_review_app_create.outcome == 'success'
        run: heroku labs:enable runtime-dyno-metadata -a $HEROKU_APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}

      - name: Release the Image
        id: heroku_release_image
        if: steps.docker-push-to-registry.outcome == 'success'
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: heroku container:release web -a $HEROKU_APP_NAME

      # Updates the PR with a link to the Review App deployment
      - name: Update deployment status on GitHub to success
        if: steps.heroku_release_image.outcome == 'success'
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ github.token }}
          target_url: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/
          environment_url: https://${{ env.HEROKU_APP_NAME }}.herokuapp.com/
          state: success
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
