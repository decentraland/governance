stages:
  - install
  - build
  # - test
  - deploy

services:
  - docker:dind

# Cache modules in between jobs
cache:
  key: ${CI_PROJECT_NAME}
  paths:
    - .npm/

build:code:
  stage: install
  image: decentraland/ci-node:latest
  variables:
    PULUMI_STACK: "website-dao"
    REPOSITORY_NAME: "governance"
  only:
    - master
    - staging
    - release
  script:

    # install dependencies
    # - npm ci --cache .npm --prefer-offline
    - mv package-lock.json package-lock.json.temp
    - mv package.json package.json.temp
    - npm i -g npm@8
    - npm i -D decentraland-gatsby-deploy@1 --legacy-peer-deps
    - mv package-lock.json.temp package-lock.json
    - mv package.json.temp package.json

    # setup dcl environment
    - export PATH="$PATH:$HOME/.pulumi/bin"
    - source dcl-env

    # setup project environment
    - pulumi login -c "s3://$STATE_BUCKET/"
    - >
      if pulumi stack select "$PULUMI_STACK-$ENVIRONMENT"; then
        echo "[stack $stack] Stack exists ✅";
      else
        pulumi stack init "$PULUMI_STACK-$ENVIRONMENT"
        echo "[stack $stack] Stack created ✅";
      fi

    - source ./node_modules/.bin/setup-environment

    - env | grep GATSBY_ > .env

    # login repository
    - export CI_REGISTRY_IMAGE="$CI_REGISTRY_REPOSITORY_AWS/$REPOSITORY_NAME:$CI_COMMIT_SHA"
    - aws ecr get-login-password --region $CI_REGISTRY_REGION | docker login --username AWS --password-stdin "$CI_REGISTRY_REPOSITORY_AWS"

    # check repository exists
    - export REPOSITORY_DESCRIPTION="$(aws ecr describe-repositories --repository-names $REPOSITORY_NAME)"
    - >
      if [ -z "$REPOSITORY_DESCRIPTION" ]; then
        echo "Creating repository $REPOSITORY_NAME";
        aws ecr create-repository --repository-name $REPOSITORY_NAME
      fi

    # build docker
    - export REPOSITORY_IMAGE_DESCRIPTION="$(aws ecr describe-images --repository-name $REPOSITORY_NAME --image-ids imageTag=$CI_COMMIT_SHA)"
    - >
      if [ -z "$REPOSITORY_IMAGE_DESCRIPTION" ]; then
        echo "Building image $CI_REGISTRY_IMAGE"
        docker build --pull -t $CI_REGISTRY_IMAGE .
        docker push $CI_REGISTRY_IMAGE
      else
        echo "Pulling image $CI_REGISTRY_IMAGE"
        docker pull $CI_REGISTRY_IMAGE
      fi

    # push server
    - pulumi plugin install resource aws v4.36.0
    - pulumi plugin install resource cloudflare v4.3.0
    - dcl-lock-sync
    - dcl-up $PULUMI_STACK
    - dcl-sync-release

    # # push static
    - mkdir ./public
    - docker run -v $PWD:/data --rm --entrypoint cp $(pulumi stack output serviceImage) -r '/app/public' '/data'

    - export BUCKET_WEBSITE_NAME="$(pulumi stack output bucketName)"

    - >
      npx @dcl/cdn-uploader@next \
            --bucket $BUCKET_WEBSITE_NAME \
            --local-folder public \
            --bucket-folder "" \
            --config "cdn.yml"

    - dcl-cache-invalidation
